// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model definition
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  // New relations for media features
  media         Media[]
  bookmarks     Bookmark[]
  collections   Collection[]

  bookings         Booking[]          // Their bookings
  reviewedBookings Booking[]   @relation("BookingReviews") // Bookings they've reviewed as admin
  bookingHistory   BookingHistory[]   
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

//models for media features
model Media {
  id            String     @id @default(cuid())
  url           String
  fileKey       String?
  title         String?
  blurDataURL   String?    // Add blur placeholder field
  uploadedAt    DateTime   @default(now())
  uploadedById  String?
  uploadedBy    User?       @relation(fields: [uploadedById], references: [id], onDelete: SetNull)
  tags          Tag[]      @relation("MediaTags")
  bookmarks     Bookmark[]

  @@map("media")
}

model Tag {
  id     String   @id @default(cuid())
  name   String   @unique
  media  Media[]  @relation("MediaTags")

  @@map("tag")
}

model Bookmark {
  id            String              @id @default(cuid())
  userId        String
  mediaId       String
  createdAt     DateTime           @default(now())
  
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  media         Media              @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  collections   BookmarkCollection[]  // Changed to use the junction table

  @@unique([userId, mediaId])  // Prevent duplicate bookmarks
  @@map("bookmark")
}

model Collection {
  id         String              @id @default(cuid())
  name       String
  createdAt  DateTime           @default(now())
  userId     String
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookmarks  BookmarkCollection[]  // Changed to use the junction table

  @@map("collection")
}

// New junction table for many-to-many relationship
model BookmarkCollection {
  bookmarkId    String
  collectionId  String
  bookmark      Bookmark    @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  collection    Collection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@id([bookmarkId, collectionId])
  @@map("bookmark_collection")
}

model Booking {
  id            String         @id @default(cuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  date          DateTime      @db.Date   // Only store date
  eventType     String        // Type of event (wedding, engagement, etc.)
  guestCount    Int          // Number of expected guests
  description   String?
  status        BookingStatus  @default(PENDING)
  waitlistPos   Int?          
  
  // Admin response tracking
  reviewedById  String?
  reviewedBy    User?         @relation("BookingReviews", fields: [reviewedById], references: [id], onDelete: SetNull)
  reviewNote    String?       // For admin to add notes/reasons for approval/rejection
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([date])
}

enum BookingStatus {
  PENDING      
  WAITLISTED   
  APPROVED     
  REJECTED     
  CANCELLED    
}

model BookingHistory {
  id              String         @id @default(cuid())
  userId          String?        // Make nullable
  user            User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Store user data directly (preserved even after user deletion)
  userName        String?        // User's name at time of booking (optional for existing records)
  userEmail       String?        // User's email at time of booking (optional for existing records)
  
  date            DateTime      @db.Date
  eventType       String        // Type of event (wedding, engagement, etc.)
  guestCount      Int          // Number of expected guests
  description     String?
  status          BookingStatus  // Keep original booking status
  originalBookingId String
  
  // Tracking info
  movedToHistoryAt DateTime    @default(now())
  reason          String      // "CANCELLED" or "PAST_DATE"
  
  // Original booking details
  waitlistPos     Int?
  reviewedById    String?      // ID of admin who reviewed the original booking
  reviewNote      String?      // Admin's review note from original booking

  @@map("booking_history")
}

